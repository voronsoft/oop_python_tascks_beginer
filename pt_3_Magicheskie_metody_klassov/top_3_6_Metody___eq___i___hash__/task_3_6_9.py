"""
Подвиг 9 (релакс). Объявите класс с именем Dimensions, объекты которого создаются командой:

d = Dimensions(a, b, c)
где a, b, c - положительные числа (целые или вещественные), описывающие габариты некоторого тела: высота, ширина и глубина.

Каждый объект класса Dimensions должен иметь аналогичные публичные атрибуты a, b, c (с соответствующими числовыми значениями).
Также для каждого объекта должен вычисляться хэш на основе всех трех габаритов: a, b, c.

С помощью функции input() прочитайте из входного потока строку, записанную в формате:

"a1 b1 c1; a2 b2 c2; ... ;aN bN cN"

Например:

"1 2 3; 4 5 6.78; 1 2 3; 0 1 2.5"

Если какой-либо габарит оказывается отрицательным значением или равен нулю,
то при создании объектов должна генерироваться ошибка командой:
raise ValueError("габаритные размеры должны быть положительными числами")

Сформируйте на основе прочитанной строки список lst_dims из объектов класса Dimensions.
После этого отсортируйте этот список по возрастанию (неубыванию) хэшей этих объектов так,
чтобы объекты с равными хэшами стояли друг за другом.

P.S. На экран ничего выводить не нужно.

Sample Input:
1 2 3; 4 5 6.78; 1 2 3; 3 1 2.5
Sample Output:
"""

# s_inp = input()  # эту строку (переменную s_inp) в программе не менять


# ваш код:
s_inp = '1 2 3; 4 5 6.78; 1 2 3; 3 1 2.5'


class Dimensions:
    def __init__(self, a, b, c):
        self.verify(a, b, c)
        self.a = a
        self.b = b
        self.c = c

    @classmethod
    def verify(cls, a, b, c):
        if a >= 0 and b >= 0 and c >= 0:
            if type(a) in (int, float) and type(b) in (int, float) and type(c) in (int, float):
                return True
            else:
                raise ValueError("габаритные размеры должны быть положительными числами")
        else:
            raise ValueError("габаритные размеры должны быть положительными числами")

    def __hash__(self):
        return hash((self.a and self.b and self.c))


# # TEST
# Сформируйте на основе прочитанной строки список lst_dims из объектов класса Dimensions.
# После этого отсортируйте этот список по возрастанию (не убыванию) хэшей этих объектов так,
# чтобы объекты с равными хэшами стояли друг за другом.
s = [[int(k) if k.isdigit() else float(k) for k in i.split()] for i in s_inp.split('; ')]
lst_dims = [Dimensions(*_) for _ in s]
lst_dims = sorted(lst_dims, key=hash)
h = [hash(i) for i in lst_dims]

# end ваш код

# TEST-TASK___________________________________
from test3_6.test_3_6_9 import test_9

test_9(Dimensions, lst_dims, s_inp)
# END
