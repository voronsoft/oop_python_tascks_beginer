"""
Подвиг 10. Объявите в программе класс с именем Box (ящик), объекты которого должны создаваться командой:
box = Box()
А сам класс иметь следующие методы:
- add_thing(self, obj) - добавление предмета obj (объект другого класса Thing) в ящик;
- get_things(self) - получение списка объектов ящика.

Для описания предметов необходимо объявить еще один класс Thing.
Объекты этого класса должны создаваться командой:
obj = Thing(name, mass)
- name - название предмета (строка);
- mass - масса предмета (число: целое или вещественное).
Объекты класса Thing должны поддерживать операторы сравнения:
obj1 == obj2
obj1 != obj2
Предметы считаются равными, если у них одинаковые названия name (без учета регистра) и массы mass.
Также объекты класса Box должны поддерживать аналогичные операторы сравнения:
box1 == box2
box1 != box2
Ящики считаются равными, если одинаковы их содержимое
(для каждого объекта класса Thing одного ящика и можно найти ровно один равный объект из второго ящика).

Пример использования классов:
b1 = Box()
b2 = Box()

b1.add_thing(Thing('мел', 100))
b1.add_thing(Thing('тряпка', 200))
b1.add_thing(Thing('доска', 2000))

b2.add_thing(Thing('тряпка', 200))
b2.add_thing(Thing('мел', 100))
b2.add_thing(Thing('доска', 2000))

res = b1 == b2 # True
P.S. В программе только объявить классы, выводить на экран ничего не нужно.
"""


class Box:
    """Ящик"""

    def __init__(self):
        self.lst_reg = list()

    # А сам класс иметь следующие методы:
    def add_thing(self, obj):
        """Добавление предмета obj (объект другого класса Thing) в ящик"""
        if isinstance(obj, Thing):
            self.lst_reg.append(obj)

    def get_things(self):
        """Получение списка объектов ящика."""
        return self.lst_reg

    # Также объекты класса Box должны поддерживать аналогичные операторы сравнения:
    # box1 == box2
    # box1 != box2
    # Ящики считаются равными, если одинаковы их содержимое
    # (для каждого объекта класса Thing одного ящика и можно найти ровно один равный объект из второго ящика).
    def __eq__(self, other):  # ==
        # если предметов в сравниваемых ящиках одинаковое количество
        answer = 0
        if len(self) == len(other):
            # если предметы одинаковы по названию и массе
            for _i in self.lst_reg:
                for _k in other.lst_reg:
                    if _i == _k:
                        answer += 1
        return True if answer == len(self.lst_reg) else False

    # количество предметов в ящике
    def __len__(self):
        return len(self.lst_reg)


class Thing:
    """Описание предметов"""

    def __init__(self, name, mass):
        if type(name) == str and type(mass) in (int, float):
            self.name = name  # название предмета (строка)
            self.mass = mass  # масса предмета (число: целое или вещественное)
        else:
            raise TypeError('Неверный тип данных.')

    # Объекты класса Thing должны поддерживать операторы сравнения:
    # obj1 == obj2
    # obj1 != obj2
    # Предметы считаются равными, если у них одинаковые названия name (без учета регистра) и массы mass.
    # Также объекты класса Box должны поддерживать аналогичные операторы сравнения:
    # box1 == box2
    # box1 != box2
    # Ящики считаются равными, если одинаковы их содержимое
    # (для каждого объекта класса Thing одного ящика и можно найти ровно один равный объект из второго ящика).
    def __eq__(self, other):  # ==
        # Предметы считаются равными, если у них одинаковые названия name (без учета регистра) и массы mass.
        return self.name.lower() == other.name.lower() and self.mass == other.mass

    def __ne__(self, other):  # !=
        return self.name.lower() != other.name.lower() or self.mass != other.mass


# # TEST
# b1 = Box()
# b2 = Box()
#
# b1.add_thing(Thing('мел', 100))
# b1.add_thing(Thing('тряпка', 200))
# b1.add_thing(Thing('доска', 2000))
#
# b2.add_thing(Thing('тряпка', 200))
# b2.add_thing(Thing('мел', 100))
# b2.add_thing(Thing('доска', 2000))
#
# res = b1 == b2  # True
