"""
Видео-разбор подвига (решение смотреть только после своей попытки): https://youtu.be/a3Har3Z_89Q

Подвиг 6. Объявите класс Graph, объекты которого можно было бы создавать с помощью команды:

gr_1 = Graph(data)
где data - список из числовых данных (данные для графика).

При создании каждого экземпляра класса должны формироваться следующие локальные свойства:
data - ссылка на список из числовых данных (у каждого объекта должен быть свой список с данными,
нужно создавать копию переданного списка);
is_show - булево значение (True/False) для показа (True) и сокрытия (False) данных графика (по умолчанию True);

В этом классе объявите следующие методы:

set_data(self, data) - для передачи нового списка данных в текущий график;
show_table(self) - для отображения данных в виде строки из списка чисел (числа следуют через пробел);
show_graph(self) - для отображения данных в виде графика (метод выводит в консоль сообщение:
"Графическое отображение данных: <строка из чисел следующих через пробел>");
show_bar(self) - для отображения данных в виде столбчатой диаграммы (метод выводит в консоль сообщение:
 "Столбчатая диаграмма: <строка из чисел следующих через пробел>");
set_show(self, fl_show) - метод для изменения локального свойства is_show на переданное значение fl_show.
Если локальное свойство is_show равно False, то методы show_table(), show_graph(), show_bar() должны выводить сообщение:
"Отображение данных закрыто"

Прочитайте из входного потока числовые данные с помощью команды:
data_graph = list(map(int, input().split()))
Создайте объект gr класса Graph с набором прочитанных данных, вызовите метод show_bar(),
затем метод set_show() со значением fl_show = False и вызовите метод show_table().
На экране должны отобразиться две соответствующие строки.

Sample Input:

8 11 10 -32 0 7 18
Sample Output:

Столбчатая диаграмма: 8 11 10 -32 0 7 18
Отображение данных закрыто
"""


# Объявите класс Graph
class Graph:
    # При создании каждого экземпляра класса должны формироваться следующие локальные свойства:
    # data - ссылка на список из числовых данных (у каждого объекта должен быть свой список с данными,
    # нужно создавать копию переданного списка);
    # is_show - булево значение (True/False) для показа (True) и сокрытия (False) данных графика (по умолчанию True);
    def __init__(self, data):
        self.data = data.copy()
        self.is_show = True

    # В этом классе объявите следующие методы
    # set_data(self, data) - для передачи нового списка данных в текущий график;
    def set_data(self, data):
        self.data = data

    # show_table(self) - для отображения данных в виде строки из списка чисел (числа следуют через пробел)
    #
    # Если локальное свойство is_show равно False, то методы show_table() должен выводить сообщение:
    # "Отображение данных закрыто"
    def show_table(self):
        if self.is_show:
            print(*self.data)
        else:
            print("Отображение данных закрыто")

    # show_graph(self) - для отображения данных в виде графика (метод выводит в консоль сообщение
    # "Графическое отображение данных: <строка из чисел следующих через пробел>")
    #
    # Если локальное свойство is_show равно False, то метод show_graph() должен выводить сообщение:
    # "Отображение данных закрыто"
    def show_graph(self):
        if self.is_show:
            print('Графическое отображение данных:', *self.data)
        else:
            print("Отображение данных закрыто")

    # show_bar(self) - для отображения данных в виде столбчатой диаграммы (метод выводит в консоль сообщение
    # "Столбчатая диаграмма: <строка из чисел следующих через пробел>")
    #
    # Если локальное свойство is_show равно False, то метод show_bar() должен выводить сообщение:
    # "Отображение данных закрыто"
    def show_bar(self):
        if self.is_show:
            print('Столбчатая диаграмма:', *self.data)
        else:
            print("Отображение данных закрыто")

    # set_show(self, fl_show) - метод для изменения локального свойства is_show на переданное значение fl_show.
    # Если локальное свойство is_show равно False, то методы show_table(), show_graph(), show_bar()
    # должны выводить сообщение: "Отображение данных закрыто"
    def set_show(self, fl_show=True):
        self.is_show = fl_show


# Прочитайте из входного потока числовые данные с помощью команды:
data_graph = list(map(int, "8 11 10 -32 0 7 18".split()))
# Создайте объект gr класса Graph с набором прочитанных данных, вызовите метод show_bar(),
gr = Graph(data_graph)
gr.show_bar()
# затем метод set_show() со значением fl_show = False и вызовите метод show_table().
gr.set_show(False)
gr.show_table()
# На экране должны отобразиться две соответствующие строки.


# TEST-TASK___________________________________
assert isinstance(gr, Graph) and hasattr(Graph, 'set_data') and hasattr(Graph, 'show_table') and \
       hasattr(Graph, 'show_graph') and hasattr(Graph, 'show_bar') and hasattr(Graph, 'set_show')

assert gr.data == data_graph, "данные в объекте класса Graph и в списке data_graph отличаются"
assert hasattr(gr, 'is_show'), "объект gr не имеет атрибута is_show"

data = [1, 2, 3, 4]
gr2 = Graph(data)
gr3 = Graph(data)
gr3.data.append(5)

assert gr2.data != gr3.data, "локальный атрибут data должен быть уникальным (своим собственным) в каждом объекте класса Graph"
print("\nПравильный ответ !")
