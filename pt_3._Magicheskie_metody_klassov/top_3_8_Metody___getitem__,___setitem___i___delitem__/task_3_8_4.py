"""
Видео-разбор подвига (решение смотреть только после своей попытки): https://youtu.be/tS-tJR8_6to

Подвиг 4. Вам необходимо написать программу по работе с массивом однотипных данных (например, только числа или строки и т.п.).
Для этого нужно объявить класс с именем Array, объекты которого создаются командой:

ar = Array(max_length, cell)
где max_length - максимальное количество элементов в массиве;
cell - ссылка на класс, описывающий отдельный элемент этого массива (см. далее, класс Integer).
Начальные значения в ячейках массива (в объектах класса Integer) должны быть равны 0.

Для работы с целыми числами объявите в программе еще один класс с именем Integer, объекты которого создаются командой:
cell = Integer(start_value)
где start_value - начальное значение ячейки (в данном случае - целое число).
В классе Integer должно быть следующее свойство (property):
value - для изменения и считывания значения из ячейки (само значение хранится в локальной приватной переменной; имя придумайте сами).
При попытке присвоить не целое число должно генерироваться исключение командой:
raise ValueError('должно быть целое число')

Для обращения к отдельным элементам массива в классе Array необходимо определить набор магических методов для следующих операций:
value = ar[0] # получение значения из первого элемента (ячейки) массива ar
ar[1] = value # запись нового значения во вторую ячейку массива ar
Если индекс не целое число или число меньше нуля или больше либо равно max_length, то должно генерироваться исключение командой:
raise IndexError('неверный индекс для доступа к элементам массива')

Пример использования классов (эти строчки в программе не писать):
ar_int = Array(10, cell=Integer)
print(ar_int[3])
print(ar_int) # должны отображаться все значения массива в одну строчку через пробел
ar_int[1] = 10
ar_int[1] = 10.5 # должно генерироваться исключение ValueError
ar_int[10] = 1 # должно генерироваться исключение IndexError
P.S. В программе нужно объявить только классы. Выводить на экран ничего не нужно.

P.P.S. В качестве дополнительного домашнего задания:
объявите еще один класс Float для работы с вещественными числами и создайте массив,
используя тот же класс Array, с этим новым типом данных.
"""


class Array:
    def __init__(self, max_length=0, cell=None):
        self.max_length = max_length  # максимальное количество элементов в массиве
        self.cell = cell  # ссылка на класс, описывающий отдельный элемент этого массива (см. далее, класс Integer)
        self.lst_obg_cell = list(
            Integer() for _ in range(max_length))  # сгенерированный список объектов по данным max_length

    # Для обращения к отдельным элементам массива в классе Array необходимо определить набор магических методов для следующих операций:
    # value = ar[0] # получение значения из ПЕРВОГО ЭЛЕМЕНТА (ячейки) массива ar
    def __getitem__(self, item):
        # Если индекс не целое число или число меньше нуля или больше либо равно max_length, то должно генерироваться исключение командой:
        # raise IndexError('неверный индекс для доступа к элементам массива')
        if isinstance(item, int) and 0 <= item < len(self.lst_obg_cell):
            return self.lst_obg_cell[item].start_value
        else:
            raise IndexError('неверный индекс для доступа к элементам массива')

    # ar[1] = value # запись нового значения во ВТОРУЮ ЯЧЕЙКУ массива ar
    def __setitem__(self, key, value):
        # Если индекс не целое число или число меньше нуля или больше, ЛИБО РАВНО max_length, то должно генерироваться исключение командой:
        # # raise IndexError('неверный индекс для доступа к элементам массива')
        if isinstance(value, int):
            if 0 <= key < len(self.lst_obg_cell):
                self.lst_obg_cell[key].start_value = value
            else:
                raise IndexError('неверный индекс для доступа к элементам массива')
        else:
            raise ValueError('должно быть целое число')

    # print(ar_int) - должны отображаться все значения массива в одну строчку через пробел
    def __str__(self):
        return f"{' '.join([str(_.start_value) for _ in self.lst_obg_cell])}"


class Integer:
    def __init__(self, start_value=0):  # Начальные значения в ячейках массива (в объектах Integer) должны быть равны 0.
        if isinstance(start_value, int):
            self.__start_value = start_value  # начальное значение ячейки (в данном случае - целое число).
        else:
            raise ValueError('должно быть целое число')

    # ______ PROPERTY _______
    # В классе Integer должно быть следующее свойство (property):
    # value - для изменения и считывания значения из ячейки (само значение хранится в локальной приватной переменной; имя придумайте сами).
    # При попытке присвоить не целое число должно генерироваться исключение командой:
    # raise ValueError('должно быть целое число')
    @property
    def start_value(self):
        return self.__start_value

    @start_value.setter
    def start_value(self, value):
        if type(value) != int:  # если не целое число
            raise ValueError('должно быть целое число')
        self.__start_value = value
    # ______ END PROPERTY _______

#  TEST
# ar_int = Array(10, cell=Integer)
# print(ar_int[3])
# print(ar_int) # должны отображаться все значения массива в одну строчку через пробел
# ar_int[9] = 10
# print(ar_int)
# # ar_int[1] = 10.5 # должно генерироваться исключение ValueError
# # ar_int[10] = 1 # должно генерироваться исключение IndexError
