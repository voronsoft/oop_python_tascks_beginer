"""
Видео-разбор подвига (решение смотреть только после своей попытки): https://youtu.be/EAt0fgLNYGg

Подвиг 9 (на закрепление).
Вам требуется сформировать класс PathLines для описания маршрутов, состоящих из линейных сегментов.
При этом каждый линейный сегмент предполагается задавать отдельным классом LineTo.
Объекты этого класса будут формироваться командой:
line = LineTo(x, y) : где x, y - следующая координата линейного участка (начало маршрута из точки 0, 0).
В каждом объекте класса LineTo должны формироваться локальные атрибуты:
x, y - для хранения координат конца линии (начало определяется по координатам предыдущего объекта).

Сам же класс PathLines должен иметь следующие методы:
get_path() - возвращает список из объектов класса LineTo (если объектов нет, то пустой список);
get_length() - возвращает суммарную длину пути (сумма длин всех линейных сегментов);
add_line(self, line) - добавление нового линейного сегмента (объекта класса LineTo) в конец маршрута.

Объекты класса PathLines должны создаваться командами:
p = PathLines()                   # начало маршрута из точки 0, 0
p = PathLines(line1, line2, ...)  # начало маршрута из точки 0, 0
где line1, line2, ... - объекты класса LineTo.

ПОЯСНЕНИЕ: суммарный маршрут - это сумма длин всех линейных сегментов,
а длина каждого линейного сегмента определяется как евклидово расстояние по формуле:
L = sqrt((x1-x0)^2 + (y1-y0)^2)
аналогичная команда:
L = sqrt(pow((x1-x0),2) + pow((y1-y0),2)
где x0, y0 - предыдущая точка маршрута; x1, y1 - текущая точка маршрута.

Пример использования классов (эти строчки в программе писать не нужно):
p = PathLines(LineTo(10, 20), LineTo(10, 30))
p.add_line(LineTo(20, -10))
dist = p.get_length()
P.S. В программе требуется объявить только классы. На экран ничего выводить не нужно.
"""
from math import sqrt


# Класс LineTo координаты линейного сегмента
# Объекты этого класса будут формироваться командой:
# line = LineTo(x, y) : где x, y - следующая координата линейного участка (начало маршрута из точки 0, 0).
# В каждом объекте класса LineTo должны формироваться локальные атрибуты:
# x, y - для хранения координат конца линии (начало определяется по координатам предыдущего объекта).
class LineTo:
    def __init__(self, x, y):
        self.x = x
        self.y = y


# Объекты класса PathLines должны создаваться командами:
# p = PathLines()                   # начало маршрута из точки 0, 0
# p = PathLines(line1, line2, ...)  # начало маршрута из точки 0, 0
# где line1, line2, ... - объекты класса LineTo.
# Сам же класс PathLines должен иметь следующие методы:
class PathLines:
    def __init__(self, *args):
        self.x = 0
        self.y = 0
        self.list_points = list(args)

    # get_path() - возвращает список из объектов класса LineTo (если объектов нет, то пустой список);
    def get_path(self):
        return self.list_points[:]

    # get_length() - возвращает суммарную длину пути (сумма длин всех линейных сегментов);
    # Пояснение: суммарный маршрут - это сумма длин всех линейных сегментов,
    # а длина каждого линейного сегмента определяется как евклидово расстояние по формуле:
    # L = sqrt((x1-x0)^2 + (y1-y0)^2) где x0, y0 - предыдущая точка маршрута; x1, y1 - текущая точка маршрута.
    def get_length(self):
        distance = 0
        for _i in range(len(self.list_points)):
            # если это начало списка
            if _i == 0:
                distance += sqrt(pow(self.list_points[_i].x - self.x, 2) + pow(self.list_points[_i].y - self.y, 2))
            # начало цикла со второго элемента, что бы просуммировать полное расстояние между точками.
            else:
                a = self.list_points[_i].x, self.list_points[_i].y
                b = self.list_points[_i - 1].x, self.list_points[_i - 1].y
                distance += sqrt(sum(pow(i[0] - i[1], 2) for i in zip(b, a)))

        return distance

    # add_line(self, line) - добавление нового линейного сегмента (объекта класса LineTo) в конец маршрута.
    def add_line(self, line):
        self.list_points.append(line)


# TEST-TASK___________________________________
assert isinstance(PathLines, object), "Не создан класс PathLines"
assert hasattr(PathLines, 'get_path'), "Объявите метод get_path"
assert hasattr(PathLines, 'get_length'), "Объявите метод get_length"
assert hasattr(PathLines, 'add_line'), "Объявите метод add_line"

assert isinstance(LineTo, object), "Не создан класс LineTo"
lineto = LineTo(0, 0)
assert hasattr(lineto, 'x'), "В экземпляре класса LineTo нет атрибута x"
assert hasattr(lineto, 'y'), "В экземпляре класса LineTo нет атрибута y"

p = PathLines(LineTo(1, 2))
assert p.get_length() == 2.23606797749979, "неверный вывод должно быть: 2.23606797749979"

p.add_line(LineTo(10, 20))
p.add_line(LineTo(5, 17))
assert p.get_length() == 28.191631669843197, "неверный вывод должно быть: 28.191631669843197"

m = p.get_path()
assert all(isinstance(i, LineTo) for i in m) and len(m) == 3, "неверный вывод должно быть: True"

h = PathLines(LineTo(4, 8), LineTo(-10, 30), LineTo(14, 2))
assert h.get_length() == 71.8992593599813, "неверный вывод должно быть: 71.8992593599813"

k = PathLines()
assert k.get_length() == 0, "неверный вывод должно быть: 0"

assert k.get_path() == [], "неверный вывод должно быть: [] (пустой список)"
print("Правильный ответ !")
