"""
Видео-разбор подвига (решение смотреть только после своей попытки): https://youtu.be/XNbphw3bYAI

Подвиг 5. Объявите класс с именем Graph и методами:

set_data(data) - передача набора данных data для последующего отображения (data - список числовых данных);
Метод set_data() должен формировать локальное свойство data объекта класса Graph.
Атрибут data должен ссылаться на переданный в метод список.

draw() - отображение данных (в том же порядке, что и в списке data)
и атрибутом:
LIMIT_Y = [0, 10]
Метод draw() должен выводить на экран список в виде строки из чисел,
разделенных пробелами и принадлежащие заданному диапазону атрибута LIMIT_Y (границы включаются).

Создайте объект graph_1 класса Graph, вызовите для него метод set_data() и передайте список:

[10, -5, 100, 20, 0, 80, 45, 2, 5, 7]

Затем, вызовите метод draw() через объект graph_1. На экране должна появиться строка с соответствующим набором чисел,
записанных через пробел. Например (вывод без кавычек):

"10 0 2 5 7"
"""

import io
import sys

# Создаю объект StringIO
output = io.StringIO()
# Перенаправляю стандартный вывод в StringIO
sys.stdout = output


# то что выше не менять !!!

# Объявите класс с именем Graph и методами:
class Graph:
    # методами:
    # set_data(data) - передача набора данных data для последующего отображения (data - список числовых данных)
    # Метод set_data() должен формировать локальное свойство data объекта класса Graph.
    # Атрибут data должен ссылаться на переданный в метод список.
    def set_data(self, lst):
        self.data = lst
        return self.data

    # draw() - отображение данных (в том же порядке, что и в списке data)
    # и атрибутом:
    # LIMIT_Y = [0, 10]
    # Метод draw() должен выводить на экран список в виде строки из чисел,
    # разделенных пробелами и принадлежащие заданному диапазону атрибута LIMIT_Y (границы включаются).
    def draw(self):
        LIMIT_Y = [0, 10]
        a = [str(i) for i in self.data if LIMIT_Y[0] <= i <= LIMIT_Y[1]]
        print(' '.join(a))


# Создайте объект graph_1 класса Graph
graph_1 = Graph()
# вызовите для него метод set_data() и передайте список: [10, -5, 100, 20, 0, 80, 45, 2, 5, 7]
graph_1.set_data([10, -5, 100, 20, 0, 80, 45, 2, 5, 7])
# Затем, вызовите метод draw() через объект graph_1.
# На экране должна появиться строка с соответствующим набором чисел, записанных через пробел.
# Например (вывод без кавычек): "10 0 2 5 7"
graph_1.draw()

# TEST-TASK___________________________________
try:
    hasattr(Graph, 'set_data')
    hasattr(Graph, 'draw')
except:
    print("Проверьте методы в классе")

# Перехва вывода в консоль
# Получаем данные из StringIO (переменной output_str присваиваем то что выводится в консоль)
output_str = output.getvalue()
# Возвращаем стандартный вывод в консоль
sys.stdout = sys.__stdout__
try:
    assert output_str == '10 0 2 5 7\n'
except:
    print("Пока не правильно !")
    print(f"Ваш ответ: {output_str}")
    print(f"Требуется: 10 0 2 5 7")
else:
    print(output_str)
    print("Отлично !")
