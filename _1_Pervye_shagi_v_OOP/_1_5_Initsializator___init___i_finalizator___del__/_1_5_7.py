"""
Видео-разбор подвига (решение смотреть только после своей попытки): https://youtu.be/ZTCdEB_6h1I

Подвиг 7.
Объявите в программе следующие несколько классов:
CPU - класс для описания процессоров;
Memory - класс для описания памяти;
MotherBoard - класс для описания материнских плат.

Обеспечить возможность создания объектов каждого класса командами:

cpu = CPU(наименование, тактовая частота)
mem = Memory(наименование, размер памяти)
mb = MotherBoard(наименование, процессор, память1, память2, ..., памятьN)
Обратите внимание при создании объекта класса MotherBoard можно передавать несколько объектов класса Memory,
максимум N - по числу слотов памяти на материнской плате (N = 4).

Объекты классов должны иметь следующие локальные свойства:

для класса CPU:
name - наименование;
fr - тактовая частота;

для класса Memory:
name - наименование;
volume - объем памяти;

для класса MotherBoard:
name - наименование;
cpu - ссылка на объект класса CPU;
total_mem_slots = 4 - общее число слотов памяти (атрибут прописывается с этим значением и не меняется);
mem_slots - список из объектов класса Memory (максимум total_mem_slots = 4 штук по максимальному числу слотов памяти).

Класс MotherBoard должен иметь метод get_config(self)
для возвращения текущей конфигурации компонентов на материнской плате в виде следующего списка из четырех строк:
['Материнская плата: <наименование>',
'Центральный процессор: <наименование>, <тактовая частота>',
'Слотов памяти: <общее число слотов памяти>',
'Память: <наименование_1> - <объем_1>; <наименование_2> - <объем_2>; ...; <наименование_N> - <объем_N>']

Создайте объект mb класса MotherBoard с одним CPU (объект класса CPU) и двумя слотами памяти (объекты класса Memory).

P.S. Отображать на экране ничего не нужно, только создать объект по указанным требованиям.
"""


# Объявите в программе следующие несколько классов:
# CPU - класс для описания процессоров;
# Объекты классов должны иметь следующие локальные свойства:
# для класса CPU: name - наименование; fr - тактовая частота;
class CPU:
    def __init__(self, name_fr):
        self.name, self.fr = name_fr.split()


# Memory - класс для описания памяти;
# Объекты классов должны иметь следующие локальные свойства:
# для класса Memory: name - наименование; volume - объем памяти;
class Memory:
    def __init__(self, args):
        self.name, self.volume = args.split()


# Объявите в программе следующий класс: MotherBoard - класс для описания материнских плат.
# Обеспечить возможность создания объектов каждого класса командами:
# mb = MotherBoard(наименование, процессор, память1, память2, ..., памятьN)
# Обратите внимание при создании объекта класса MotherBoard можно передавать несколько объектов класса Memory,
# максимум N - по числу слотов памяти на материнской плате (N = 4).
#
# Для класса MotherBoard Объекты класса должны иметь следующие локальные свойства:
# name - наименование;
# cpu - ссылка на объект класса CPU;
# total_mem_slots = 4 - общее число слотов памяти (атрибут прописывается с этим значением и не меняется);
# mem_slots - список из объектов класса Memory (максимум total_mem_slots = 4 штук по максимальному числу слотов памяти).


class MotherBoard:
    def __init__(self, mb_name, cpu_name_fr, *args_memory):
        self.name = mb_name  # наименование материнской платы
        self.cpu = CPU(cpu_name_fr)  # ссылка на объект класса CPU
        self.total_mem_slots = 4  # общее число слотов памяти
        self.mem_slots = [Memory(i) for i in args_memory[:self.total_mem_slots]]  # список из объектов класса Memory

    # Класс MotherBoard должен иметь метод get_config(self)
    # для возвращения текущей конфигурации компонентов на материнской плате в виде следующего списка из четырех строк:
    # ['Материнская плата: <наименование>',
    # 'Центральный процессор: <наименование>, <тактовая частота>',
    # 'Слотов памяти: <общее число слотов памяти>',
    # 'Память: <наименование_1> - <объем_1>; <наименование_2> - <объем_2>; ...; <наименование_N> - <объем_N>']

    def get_config(self):
        return [f'Материнская плата: {self.name}',
                f'Центральный процессор: {self.cpu.name}, {self.cpu.fr}',
                f'Слотов памяти: {self.total_mem_slots}',
                "Память: " + '; '.join(map(lambda x: f'{x.name} - {x.volume}', self.mem_slots))]


# Создайте объект mb класса MotherBoard с одним CPU (объект класса CPU) и двумя слотами памяти (объекты класса Memory).
mb = MotherBoard('Asrok', 'Intel 1666', 'Kingston 8192', 'Godram 8192', 'Kingston 8192', 'Godram 8192', 'Godram 8192')
# для проверки вывода по условию метода get_config(self)
# print(mb.get_config())


# TEST-TASK___________________________________
assert isinstance(mb, MotherBoard) and hasattr(MotherBoard, 'get_config')


def get_config():
    mem_str = "; ".join([f"{x.name} - {x.volume}" for x in mb.mem_slots])

    return [f"Материнская плата: {mb.name}",
            f"Центральный процессор: {mb.cpu.name}, {mb.cpu.fr}",
            f"Слотов памяти: {mb.total_mem_slots}",
            f"Память: {mem_str}"]


res1 = ("".join(mb.get_config())).replace(" ", "")
res2 = ("".join(get_config())).replace(" ", "")
assert res1 == res2, "метод get_config возвратил неверные данные"
print("Правильно !")
